CountOfCosecutiveOccurence:
import java.util.*;
public class CountOfConsecutiveOccurance {
  public static void main(String args[]) {
    Scanner sc = new Scanner(System.in);
    String str = sc.next();
    int counter = 1;

    List<Character> result = new ArrayList<>();

    for(int i = 1; i < str.length(); i++) {
      if(str.charAt(i) == str.charAt(i - 1)) {
        counter++;

        if(counter == 2 && !result.contains(str.charAt(i))) {
          result.add(str.charAt(i));
          counter = 1;
        }
      }
      else {
        counter = 1;
      }
    }

    System.out.print(result);
  }
}


First and Last Duplicate Difference:
import java.util.*;
public class Duplicate_Difference {
  public static void main(String args[]) {
    Scanner sc = new Scanner(System.in);

    int n = sc.nextInt();
    int arr[] = new int[n];

    for (int i = 0; i < n; i++) {
      arr[i] = sc.nextInt();
    }

    List<Integer> duplicates = new ArrayList<>();

    for(int i = 0; i < n; i++) {
      for(int j = i + 1; j < n; j++) {
        if(arr[i] == arr[j] && !duplicates.contains(arr[i])) {
          duplicates.add(arr[i]);
          break;
        }
      }
    }

    System.out.println(Math.abs(duplicates.get(0) - duplicates.get(duplicates.size() - 1)));
  }
}


Employee database:
import java.sql.*;
import java.util.*;

public class EmployeeDatabase {
    private static final String URL = "jdbc:mysql://localhost:3306/<database_name>";
    private static final String USER = "username";
    private static final String PASSWORD = "password";

    public static void main(String[] args) {
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
            createEmployeeTable(conn);
            insertSampleData(conn);
            updateTotalSalary(conn);
            listHighestPaidEmployees(conn);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void createEmployeeTable(Connection conn) throws SQLException {
        String sql = "CREATE TABLE IF NOT EXISTS EMPLOYEE (" +
                "Emp_id INT PRIMARY KEY," +
                "Emp_Name VARCHAR(100)," +
                "Emp_Address VARCHAR(255)," +
                "Emp_designation VARCHAR(100)," +
                "Emp_department VARCHAR(100)," +
                "Emp_Phone_No VARCHAR(20)," +
                "Emp_Basicpay DECIMAL(10, 2)," +
                "Emp_HRA DECIMAL(10, 2)," +
                "Emp_DA DECIMAL(10, 2)," +
                "Emp_TA DECIMAL(10, 2)," +
                "Emp_Salary DECIMAL(10, 2)" +
                ")";
        try (Statement stmt = conn.createStatement()) {
            stmt.execute(sql);
        }
    }

    private static void insertSampleData(Connection conn) throws SQLException {
        String sql = "INSERT INTO EMPLOYEE (Emp_id, Emp_Name, Emp_Address, Emp_designation, Emp_department, Emp_Phone_No, Emp_Basicpay) VALUES " +
                "(1, 'John Doe', '123 Main St', 'Manager', 'Sales', '555-1234', 50000)," +
                "(2, 'Jane Smith', '456 Elm St', 'Developer', 'IT', '555-5678', 60000)," +
                "(3, 'Bob Johnson', '789 Oak St', 'Analyst', 'Finance', '555-9012', 55000)," +
                "(4, 'Alice Brown', '321 Pine St', 'Manager', 'IT', '555-3456', 65000)," +
                "(5, 'Charlie Davis', '654 Maple St', 'Salesperson', 'Sales', '555-7890', 45000)";
        try (Statement stmt = conn.createStatement()) {
            stmt.execute(sql);
        }
    }

    private static void updateTotalSalary(Connection conn) throws SQLException {
        String sql = "UPDATE EMPLOYEE SET " +
                "Emp_HRA = Emp_Basicpay * 0.10, " +
                "Emp_DA = Emp_Basicpay * 0.02, " +
                "Emp_TA = Emp_Basicpay * 0.02, " +
                "Emp_Salary = Emp_Basicpay + (Emp_Basicpay * 0.10) + (Emp_Basicpay * 0.02) + (Emp_Basicpay * 0.02)";
        try (Statement stmt = conn.createStatement()) {
            stmt.execute(sql);
        }
    }

    private static void listHighestPaidEmployees(Connection conn) throws SQLException {
        String sql = "SELECT e1.* FROM EMPLOYEE e1 " +
                "INNER JOIN (SELECT Emp_department, MAX(Emp_Salary) as max_salary " +
                "FROM EMPLOYEE GROUP BY Emp_department) e2 " +
                "ON e1.Emp_department = e2.Emp_department AND e1.Emp_Salary = e2.max_salary " +
                "ORDER BY e1.Emp_department";

        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            System.out.println("Highest paid employees from each department:");
            System.out.println("---------------------------------------------");

            while (rs.next()) {
                System.out.printf("Department: %s\n", rs.getString("Emp_department"));
                System.out.printf("Employee ID: %d\n", rs.getInt("Emp_id"));
                System.out.printf("Name: %s\n", rs.getString("Emp_Name"));
                System.out.printf("Designation: %s\n", rs.getString("Emp_designation"));
                System.out.printf("Total Salary: %.2f\n\n", rs.getDouble("Emp_Salary"));
            }
        }
    }
}


Student Marks:
import java.util.*;

class Students {
  protected String Name;
  protected String RegNo;
  protected String Dept;
  protected int Year;
  protected int Semester;
  protected int Mark1;
  protected int Mark2;
  protected int Mark3;
  protected int Mark4;
  protected int Mark5;
  protected int Mark6;
  protected double Total;
  protected double Average;

  public Students(String Name, String RegNo, String Dept, int Year, int Semester, int Mark1, int Mark2, int Mark3, int Mark4, int Mark5, int Mark6) {
    this.Name = Name;
    this.RegNo = RegNo;
    this.Dept = Dept;
    this.Year = Year;
    this.Semester = Semester;
    this.Mark1 = Mark1;
    this.Mark2 = Mark2;
    this.Mark3 = Mark3;
    this.Mark4 = Mark4;
    this.Mark5 = Mark5;
    this.Mark6 = Mark6;

    Total = Mark1 + Mark2 + Mark3 + Mark4 + Mark5 + Mark6;
    Average = Total / 6;
  }
  
}

public class StudentMarks {
  protected static Students getData(Scanner sc) {
    System.out.println("Enter the name of the student: ");
    String Name = sc.next();

    System.out.println("Enter the RegNo of the student: ");
    String RegNo = sc.next();

    System.out.println("Enter the Dept of the student: ");
    String Dept = sc.next();

    System.out.println("Enter the Year of the student: ");
    int Year = sc.nextInt();

    System.out.println("Enter the Semester of the student: ");
    int Semester = sc.nextInt();

    System.out.println("Enter the Mark1 of the student: ");
    int Mark1 = sc.nextInt();

    System.out.println("Enter the Mark2 of the student: ");
    int Mark2 = sc.nextInt();

    System.out.println("Enter the Mark3 of the student: ");
    int Mark3 = sc.nextInt();

    System.out.println("Enter the Mark4 of the student: ");
    int Mark4 = sc.nextInt();

    System.out.println("Enter the Mark5 of the student: ");
    int Mark5 = sc.nextInt();

    System.out.println("Enter the Mark6 of the student: ");
    int Mark6 = sc.nextInt();

    Students obj = new Students(Name, RegNo, Dept, Year, Semester, Mark1, Mark2, Mark3, Mark4, Mark5, Mark6);

    return obj;
  }

  protected static void display(List<Students> list) {
    for(Students obj : list) {
      System.out.println("Name: " + obj.Name);
      System.out.println("RegNo: " + obj.RegNo);
      System.out.println("Dept: " + obj.Dept);
      System.out.println("Year: " + obj.Year);
      System.out.println("Semester: " + obj.Semester);
      System.out.println("Mark1: " + obj.Mark1);
      System.out.println("Mark2: " + obj.Mark2);
      System.out.println("Mark3: " + obj.Mark3);
      System.out.println("Mark4: " + obj.Mark4);
      System.out.println("Mark5: " + obj.Mark5);
      System.out.println("Mark6: " + obj.Mark6);
      System.out.println("Total: " + obj.Total);
      System.out.println("Average: " + obj.Average);
    }
  }
  
  public static void main(String args[]) {
    Scanner sc = new Scanner(System.in);
    boolean flag = true;

    System.out.println("Press 1 to add a new student \n Press 2 to display the overall average of the class \n Press 3 to display the students details with their percentage \n Press 4 to exit");

    List<Students> listStudents = new ArrayList<>();

    while(flag) {

      System.out.println("Enter your choice: ");
      
      switch(sc.nextInt()) {
        case 1:
          listStudents.add(getData(sc));
          break;
        case 2:
          display(listStudents);
          break;
        default:
          System.out.println("Invalid Input");
          flag = false;
          break;
      }
    }
  }
}
